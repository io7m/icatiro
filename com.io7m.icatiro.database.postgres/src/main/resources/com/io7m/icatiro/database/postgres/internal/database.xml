<?xml version="1.0" encoding="UTF-8" ?>

<Schemas xmlns="urn:com.io7m.trasco.database.statements:1:0">
  <Schema versionCurrent="0">
    <Comment>
      The icatiro role is a least-privilege role that can perform only those operations required to run the system and
      no others.
    </Comment>

    <Statement><![CDATA[
create role icatiro with nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The icatiro_none role is a no-privilege role that cannot perform any actions.
    </Comment>

    <Statement><![CDATA[
create role icatiro_none with nosuperuser nocreatedb nocreaterole noinherit nologin;
]]></Statement>

    <Comment>
      The schema version table stores the current version of the database schema. Implementations are expected to query
      this table on connecting to the database in order to ensure that the calling code is compatible with the tables in
      the database.
    </Comment>

    <Statement><![CDATA[
create table schema_version (
  version_lock   char(1) not null default 'x',
  version_number bigint  not null,

  constraint check_lock_primary primary key (version_lock),
  constraint check_lock_locked check (version_lock = 'x')
)
]]></Statement>
  </Schema>

  <Schema versionCurrent="1">
    <Comment>
      The users table stores the current set of users.
    </Comment>

    <Statement><![CDATA[
create table users (
  id      uuid     not null primary key,
  name    text     not null,
  initial boolean  not null
)
]]></Statement>

    <Statement>grant select, insert, update on users to icatiro</Statement>
    <Statement>grant select (id) on users to icatiro_none</Statement>

    <Statement><![CDATA[
create function user_initial_check() returns trigger as $$
  declare
    count integer;
  begin
    if old.initial = false and new.initial = true then
      select count(*) into count from users a where a.initial = true;
      if count >= 1 then
        raise sqlstate 'IC003' using message = 'Only one user can be the initial admin.';
        return null;
      end if;
    end if;
    return old;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create trigger user_initial_check_insert
  before insert on users
    for each statement
      execute function user_initial_check();
]]></Statement>

    <Statement><![CDATA[
create trigger user_initial_check_update
  before update on users
    for each statement
      execute function user_initial_check();
]]></Statement>

    <Comment>The emails table stores the set of email addresses used by users.</Comment>

    <Statement><![CDATA[
create table emails (
  user_id         uuid,
  email_address   varchar(1000000) not null unique,

  foreign key (user_id) references users (id)
)
]]></Statement>

    <Statement>grant select, insert, delete on emails to icatiro</Statement>

    <Comment>
      The audit table stores a list of auditable events. Who did it? What did they do? When did they do it?
    </Comment>

    <Statement><![CDATA[
create table audit (
  id       bigint                   not null primary key generated always as identity,
  user_id  uuid                     not null,
  time     timestamp with time zone not null,
  type     text                     not null,
  message  text                     not null,

  foreign key (user_id) references users (id)
)
]]></Statement>

    <Statement>grant insert, select on audit to icatiro</Statement>

    <Statement><![CDATA[
create index on audit (time);
]]></Statement>

    <Comment>
      The projects table stores the set of projects.
    </Comment>

    <Statement><![CDATA[
create table projects (
  id            bigint           not null primary key generated always as identity,
  name_display  varchar(1000000) not null unique,
  name_short    varchar(1000000) not null unique
)
]]></Statement>

    <Statement>grant insert, select on projects to icatiro</Statement>

    <Comment>
      The projects table stores the set of tickets.
    </Comment>

    <Statement><![CDATA[
create table tickets (
  id             bigint                    not null primary key generated always as identity,
  project        bigint                    not null,
  title          text                      not null,
  description    text                      not null,
  reporter       uuid                      not null,
  time_created   timestamp with time zone  not null,
  time_updated   timestamp with time zone  not null,

  -- [jooq ignore start]
  title_ts        tsvector generated always as (to_tsvector('english', title)) stored,
  description_ts  tsvector generated always as (to_tsvector('english', description)) stored,
  -- [jooq ignore stop]

  foreign key (project)  references projects (id),
  foreign key (reporter) references users (id)
)
]]></Statement>

    <Statement>grant insert, select on tickets to icatiro</Statement>
    <Statement>grant update (time_updated) on tickets to icatiro</Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
create index on tickets (time_created);
-- [jooq ignore stop]
]]></Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
create index on tickets (time_updated);
-- [jooq ignore stop]
]]></Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
create index on tickets using gin (title_ts);
-- [jooq ignore stop]
]]></Statement>

    <Statement><![CDATA[
-- [jooq ignore start]
create index on tickets using gin (description_ts);
-- [jooq ignore stop]
]]></Statement>

    <Comment>
      The ticket_comments table stores comments for each ticket.
    </Comment>

    <Statement><![CDATA[
create table ticket_comments (
  id                 bigint not null primary key generated always as identity,
  ticket_id          bigint not null,
  ticket_replied_to  bigint,
  owner              uuid not null,
  text               text not null,
  time               timestamp with time zone not null,

  foreign key (owner)             references users (id),
  foreign key (ticket_id)         references tickets (id),
  foreign key (ticket_replied_to) references ticket_comments (id)
)
]]></Statement>

    <Statement>grant insert, select on ticket_comments to icatiro</Statement>

    <Comment>
      The permissions table stores the set of permissions held by a user. If scope_project is non-null, then the
      permission applies to all objects within a project. If scope_ticket is also non-null, then the permission
      applies to the specified ticket. If scope_project and scope_ticket are both null, then the permission applies
      globally.

      The permission values are integer enumeration values specified in com.io7m.icatiro.model.IcPermission.
    </Comment>

    <Statement><![CDATA[
create table permissions (
  user_id        uuid not null,
  scope_project  bigint,
  scope_ticket   bigint,
  permission     integer not null,

  unique (user_id, scope_project, scope_ticket, permission),

  foreign key (user_id)       references users (id),
  foreign key (scope_project) references projects (id),
  foreign key (scope_ticket)  references tickets (id)
)
]]></Statement>

    <Statement><![CDATA[
create function permissions_ticket_check() returns trigger as $$
  declare
    r_project bigint;
    r_ticket bigint;
  begin
    if new.scope_ticket is not null then
      if new.scope_project is null then
        raise sqlstate 'IC001' using message = 'If ticket ID is non-null, then project ID must be non-null';
      end if;

      select t.project into r_project from tickets t where t.project = new.scope_project and t.id = r_ticket;
      if r_project is null then
        raise sqlstate 'IC002' using message = 'Ticket must belong to project';
      end if;
    end if;
    return new;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create trigger permissions_ticket_check_trigger
  before insert on permissions
    for each statement
      execute function permissions_ticket_check();
]]></Statement>

    <Statement>grant insert, select, delete on permissions to icatiro</Statement>

    <Statement><![CDATA[
create function permission_is_allowed_globally (
  p_user_id    uuid,
  p_permission integer
) returns boolean as $$
  declare
    c bigint;
  begin
    select count(*) into c from permissions p
      where p.user_id       = p_user_id
        and p.permission    = p_permission
        and p.scope_project is null
        and p.scope_ticket  is null;
    return c > 0;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create function permission_is_allowed_projectwide (
  p_user_id    uuid,
  p_project    bigint,
  p_permission integer
) returns boolean as $$
  declare
    c bigint;
  begin
    select count(*) into c from permissions p
      where p.user_id       = p_user_id
        and p.permission    = p_permission
        and p.scope_project = p_project
        and p.scope_ticket  is null;
    return c > 0;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create function permission_is_allowed_ticketwide (
  p_user_id    uuid,
  p_project    bigint,
  p_ticket     bigint,
  p_permission integer
) returns boolean as $$
  declare
    c bigint;
  begin
    select count(*) into c from permissions p
      where p.user_id       = p_user_id
        and p.permission    = p_permission
        and p.scope_project = p_project
        and p.scope_ticket  = p_ticket;
    return c > 0;
  end;
$$ language plpgsql;
]]></Statement>

    <Statement><![CDATA[
create function permission_is_allowed (
  user_id    uuid,
  project    bigint,
  ticket     bigint,
  permission integer
) returns boolean
  language sql
  strict
  return (
    select permission_is_allowed_globally (user_id, permission)
      or permission_is_allowed_projectwide (user_id, project, permission)
      or permission_is_allowed_ticketwide (user_id, project, ticket, permission)
  )
]]></Statement>
  </Schema>

</Schemas>
